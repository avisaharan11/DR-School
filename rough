
  useEffect(() => {
    // setClassGrade(classGradeRef.current.value)
    // setName(nameRef.current.value)
    // setFatherName(fatherNameRef.current.value)
    // setMotherName(motherNameRef.current.value)
    console.log(`nameState: ${name}, nameRef:${nameRef.current.value} classGradeState: ${classGrade}, classGradeRef:${classGradeRef.current.value} fatherNameState: ${fatherName}, fatherNameRef:${fatherNameRef.current.value} motherNameState: ${motherName}, motherNameRef:${motherNameRef.current.value}`)
  })
  // //useEffect on ClassGrade Change
  // useEffect(() => {
  //   if (data) {
  //     let namesByClass = data.filter((student) => student.classGrade == classGrade)
  //     setNamesByClass(namesByClass)
  //   }
  // },[classGrade])
  // //useEffect on Name Change
  // useEffect(() => {
  //   if (data) {
  //     let students = data.filter((student) => student.classGrade == classGrade && student.name == name)
  //     setAvailableStudents(students)
  //   }},[name])
  // useEffect(() => {
  //   if (data) {
  //     let availableNames=data.filter((student)=>student.classGrade==classGrade)
  //     setAvailableNames(availableNames)
  //     let students = data.filter((student) => classGrade?student.classGrade == classGrade:true && name?student.name == name:true && fatherName?student.fatherName == fatherName:true && motherName?student.motherName == motherName:true)
  //     setAvailableStudents(students)
  //   }
  // }, [classGrade, name, fatherName, motherName])

  useEffect(() => {
    setName(nameRef.current.value)
  }, [namesByClass])

  useEffect(() => {
    setFatherName(fatherNameRef.current.value)
    setMotherName(motherNameRef.current.value)
  }, [availableStudents])

  useEffect(() => {
    let students = filterData()
    setAvailableStudents(students)
  },[name])


  function changeClassGrade(e) {
    setClassGrade(e.target.value)
    setNamesByClass(data.filter((student) => student.classGrade == classGradeRef.current.value))
  }
  function changeName(e) {
    setName(e.target.value)
    let students = data.filter((student) => student.classGrade == classGrade && student.name == e.target.value)
    setAvailableStudents(students)
  }